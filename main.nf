#!/usr/bin/env nextflow
/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    model-check     help section
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

nextflow.enable.dsl = 2


// this prints the help in case you use --help parameter in the command line and it stops the pipeline
if (params.help) {
    log.info "\nThis is the help section of the pipeline, accessed using --help flag from command line."
    log.info "Here follows a description of the functionality and all the flags of the pipeline.\n"
    log.info "This pipeline trains and tune a model for each fasta file given/generated."
    log.info "Then it checks what has the model learnt using HOMER motif discovery on the convolution filters."
    log.info "It also reports a series of statistics about the training step and the final model."
    log.info "On top of this is able to generate many different fasta files as input based on the combinations of"
    log.info "flags given, (described below).\n"
    log.info "\nGENERAL FLAGS:"
    log.info "--help                   Print this help section and exit without doing anything.\n"
    log.info "--outdir                 The path to the directory where every result generated by the pipeline is saved."
    log.info "                         it can be a relative or absoluth path. Default ./results/" 
    log.info "                         Since this pipeline trains many model in parallel any result file  specific to a given model"
    log.info "                         is saved in it's own specific subdirectory under outdir."
    log.info "                         The names of each subdir is a unique identifier generated by the pipeline"
    log.info "                         (described in Input flags section).\n"
    log.info "--publish_dir_mode       The modality in which the files are placed in the outdir from the work dir created by nextflow."
    log.info "                         Default 'copy', the value of this flag is directly passed to the publishDir declaration."
    log.info "                         look at nextflow documentation on <publishDir mode:> for other supported values.\n"
    log.info "--max_retries            The number (integer) of times a task/process should be retried when it fails. Default 0, no retry.\n"
    log.info "--err_start              The strategy the pipeline has to adopt in case of failed task, Default 'finish', meaning"
    log.info "                         all pending task still running are left to finish or fail instead of killing them on spot."
    log.info "                         For more explanation and supported values look on nextflow documentation for "
    log.info "                         <errorStrategy> in the process scope.\n"
    log.info "--max_cpus               The maximum number of cpu nextflow processes can use. Default 6. \n"
    log.info "--max_memory             The maximum RAM+swap usable from  nextflow processes. Default 8.GB. \n"
    log.info "--max_time               The maximum time the pipeline has to run. Afterwards gets killed. Default 24h.\n"
    log.info "                         ## All 3 above flags can be overwritten in custom profile, like configs/crg.config does."
    log.info "\n\nINPUT FLAGS:"
    log.info "--input_fasta            Flag to give input fasta/s and skip generation of the latter. A model will be trained and analized"
    log.info "                         for each fasta file given. Is up to the user to give a meaningfull and correctly formatted fasta."
    log.info "                         Sequences must be on one line and the ID of the following structure:"
    log.info "                         >seq_ID|tag"
    // TODO describe whta is the tag and what is it used for
    log.info "                         When this flag is given no fasta file will be present in the subdir of the corresponding model output"
    log.info "                         subdir. The name of this subdir is the name of the corresponding input fasta without extention.\n"
    log.info '                         ## More than one file can be given as input to the same flag using double quotation and a glob path'
    log.info '                         ## like -> --flag_name "dir/path*.fa"'
    log.info "                         ## Either one between --motif and --jaspar have to be specified if --input_fasta is not.\n"
    log.info "--motif                  The files specified with this flag must be in csv format."
    log.info "                         Throught this flag is possible to specify file containing raw sequence motifs, like 'ATTA'."
    log.info "                         If on one line has more than one motif, comma separated, the pipeline will use them all together to"
    log.info "                         enrich the fasta sequences. (FEATURE NOT IMPLEMENTED YET)\n"
    log.info "--jaspar                 Flag to give a csv file with JASPAR motif IDs on which generate the fasta."
    log.info "                         If given the flag motif will be ignored."
    log.info "                         The program automaticly retrieves the motif from JASPAR database and formats it correctly for HOMER."
    log.info "                         As for --motif flag multiple JASPAR IDs on the same line will all be used to enrich the sequences."
    log.info "                         (FEATURE NOT IMPLEMENTED YET)\n"
    log.info "--generate_from_fasta    Both --motif and --jaspar specify motifs to use to enrich a set of sequences."
    log.info "                         This set of sequences can be randomly generated or specified with this flag."
    log.info "                         In simple terms this flag by itself is useless."
    log.info "                         But when specified either with --motif or --jaspar it provides the fasta file containing the "
    log.info "                         set of sequences that should be enriched. When it is not specified a random set of sequences will "
    log.info "                         be enriched instead.\n"
    log.info "                         ## To clarify: a model will be trained for each input fasta file."
    log.info "                         ## In the case a motif file/s is/are specified these input fasta"
    log.info "                         ## will be automatically generated from the pipeline and their total number will be:"
    log.info "                         ## ( total number of lines in motif file/s ) x ( 1 or number of fasta files in --generate_from_fasta )"
    log.info "\n\nSKIP FLAGS:"
    log.info "--skip_check             Flag to give in case you want to skip the checks for the trainability of the data and model."
    log.info "                         Default false, meaning check trainability.\n"
    log.info "--skip_homer             Flag to give in case you want to skip the steps necessary to verify whether the model"
    log.info "                         has leart the motif/s given as input to enrich the fasta sequences."
    log.info "                         Default false, meaning use HOMER."
    log.info "\n\nPARAMETERS FLAGS:"
    log.info "--dna_seq_len            Specify length of DNA to be generated, default 100."
    log.info "                         In case of a given fasta to be enriched like using the flag -generate_from_fasta : "
    log.info "                         if the two DNA length differ an error will be raised.\n"
    log.info "--motif_tag              Score of positive class for training. Default 5.  (only when usinf --motif flag)\n"
    log.info "--non_motif_tag          Score of negative class for training. Default 0.  (only when usinf --motif flag)\n"
    log.info "--num_seq                The total number of DNA sequences the script generates for each fasta,"
    log.info "                         as total (positive set + negative set)."
    log.info "                         In case of a given fasta like using the flag -generate_from_fasta : "
    log.info "                         this flag will be ignored and number of sequences per fasta will not be touched.\n"
    log.info "--motif_start            The motif starting input position along the DNA seq."
    log.info "                         When enriching the fasta all motif will be put at this given position."
    log.info "                         Default random, each sequence will have it in a different spot.\n"
    log.info "--batch_size             The size of the batches in which the data are dived for training. Default 10,100."
    log.info "                         Meaninng all decades value are tested -> 10, 20 ,30,40 ecc .. up to 100."
    log.info "                         Ten values are chosen equally interspaced between the values given."
    log.info "                         For the check trainability process only the right value is used, in this case 100.\n"
    log.info "--batch_shuffle          Whether or not to shuffle the batches during training. Default true.\n"
    log.info "--epochs                 Number of epochs run by each model training instance. Default is 10.\n"
    log.info "--filter_size            The convolution filter size to be explored during hyperparameter search."
    log.info "                         Default 2,20. Meaning value between 2,20 are tested.\n"
    log.info "--optimizer_lr           The linear rate value of the optimizer. Default 1e-4,o.o1."
    log.info "                         The learning rate during training is it taken from this range."
    log.info "                         In tecnical terms means doing the tune.loguniform between those two values.\n"
    log.info "--number_sample          The number of model training in parallel for each 'step' of the Hyperparameter search."
    log.info "                         The higher the number, the more exaustive is the search in the Hyperparameter space. "
    log.info "                         Default 15. In tecnical terms is the Ray tune.Tuner tune_config num_samples variable."
    exit 1
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    NAMED WORKFLOW FOR PIPELINE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

include { HANDLE_FASTA    } from './workflows/handle_fasta.nf'
include { JASPAR_DOWNLOAD } from './workflows/jaspar_download.nf'
include { CHECK_TRAINABLE } from './workflows/check_trainable.nf'
include { TRAIN           } from './workflows/train.nf'
include { VERIFY_TRAINED  } from './workflows/verify_trained.nf'
include { PLOT_MODEL      } from './workflows/plot_model.nf'

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    RUN ALL WORKFLOWS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/


workflow {

    // TODO make a nicer print of the filename
    // TODO write all parameters flags to log file
    	
    HANDLE_FASTA()
    fasta          = HANDLE_FASTA.out.fasta
    fasta_message  = HANDLE_FASTA.out.completition_message 
    fasta_message.view()
    
    JASPAR_DOWNLOAD()
    jaspar_db      = JASPAR_DOWNLOAD.out.db
    jaspar_message = JASPAR_DOWNLOAD.out.completition_message
    jaspar_message.view()
    
    CHECK_TRAINABLE( fasta.first() )
    check_message  = CHECK_TRAINABLE.out.message
    check_message.view()
    
    TRAIN( fasta, check_message )
    train_message  = TRAIN.out.message
    architecture   = TRAIN.out.architecture
    trained_model  = TRAIN.out.trained_model
    train_message.view()
    
    VERIFY_TRAINED( fasta, architecture, trained_model, jaspar_db )
    verify_message = VERIFY_TRAINED.out.completition_message
    verify_message.view()    
    
    PLOT_MODEL( architecture, trained_model )
    plot_message = PLOT_MODEL.out.message
    plot_message.view()
    
}

workflow.onComplete {
    println "# best model parameter file          : ${params.outdir}/model/best_model.pt "
    println "# model architecture dictionary file : ${params.outdir}/model/architecture.txt"
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    THE END
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
