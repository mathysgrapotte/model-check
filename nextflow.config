params {

    // General
    outdir              = "./results"
    publish_dir_mode    = "copy"
    max_retries         = 0
    err_start           = 'finish'

    // Inputs
    input_fasta         = null			// flag to give input fasta and skip generation of the latter
    motif               = null                  // flag to give a csv file with sequence motif/s on which generate the fasta.
                                                // one between this and the following are mandatory.
    jaspar              = null                  // flag to give a csv file with JASPAR motif IDs on which generate the fasta. 
                                                // If given the flag motif will be ignored.
                                                // the program automaticly retrieves the motif from JASPAR database.
    generate_from_fasta = null                  // Flag to tell the pipeline to generate the dataset from an existing set of fasta sequences.
                                                // On default the dna sequences are raqndomly generated and the enriched wth a motif.
    generated_fasta     = null			// flag to tell the name of the generated DNA file.
                                                // default gen-<params.generate_from_fasta><params.motif/params.jaspar_id.Basename>.fa 
    skip_check          = false                 // flag to give in case you want to skip the checks for the trainability of the 
                                                // data and model. Default behaviour is to check.

    // Parameters
    dna_seq_len         = null                  // specify length of DNA to be generated, default 100, or in case the dna are given the length of them
    motif_tag           = null                  // score of positive class
    non_motif_tag       = null                  // score of negative class
    num_seq             = null                  // The total number of DNA sequences the script generates
    motif_start         = null                  // the motif starting input positio in the DNA seq
    batch_size          = null                  // The size of the batches in which the data are dived. Default 10,100. Meaninng all decades value
                                                //  are tested aka -> 10, 20 ,30,40 ecc .. up to 100. Ten values are taken equally interspaced 
                                                // between the values given. For the check trainability test only the right value is used aka 100.
    batch_shuffle       = null                  // whether or not to shuffle the batches. default yes.
    epochs              = null                  // number of epochs run by each model instance (default is 10)
    filter_size         = null                  // The convolution filter size to be tested. Default 2,20. Meaning value between 2,20 are tested.
    optimizer_lr        = null                  // The linear  rate value of the optimizer. Default 1e-4,o.o1. Meaning doing the tune.loguniform 
                                                // between those two values.
    
}

// Load modules.config for DSL2 module specific options

includeConfig 'configs/modules.config'


profiles {

    crg               {includeConfig "configs/crg.config"}
    test              {includeConfig "configs/test.config"}
    local             {includeConfig "configs/local.config"}

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
