params {

    // General
    outdir           = "./data"
    publish_dir_mode = "copy"
    

    // Inputs
    input_fasta         = null			// flag to give input fasta and skip generation of the latter
    generated_fasta     = null			// flag to tell the name of the generated DNA file, default gen- <motif-seq> .fa
    skip_check          = false                 // flag to give in case you want to skip the checks for the trainability of the 
                                                // data and model. Default behaviour is to check.

    // Parameters
    dna_seq_len         = null                  // specify length of DNA to be generated, default 100, or in case the dna are given the length of them
    motif               = null                  // specify string of motif touse for generation of DNA
    motif_tag           = null                  // TODO add comment
    non_motif_tag       = null                  // TODO add comment
    num_seq             = null                  // The total number of DNA sequences the script generates
    motif_start         = null                  // the motif starting input positio in the DNA seq
    batch_size          = null                  // the batch size for training default 100.
    batch_shuffle       = null                  // whether or not to shuffle the batches. default yes.
    optimizer_lr        = null                  // the value of the linear rate of the training optimiser. default 0.01
    optimizer_mom       = null                  // the value of the momentum parameter of the training optimiser. default 0.5.
    
}

// Load modules.config for DSL2 module specific options

includeConfig 'configs/modules.config'


profiles {

    crg               {includeConfig "configs/crg.config"}
    test              {includeConfig "configs/test.config"}

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
